 mkdir 文件名  //创建文件
 cd  切换目录
 pws 显示文件
 git init    //初始化仓库  步骤 先到想要当前目录之下然后在用git init进行初始化
 ls -ah		//查看详细的文件，dir 也可以
 
 ///上传到git仓库两步骤
 git add 文件名  //可以多次使用
 git commit -m  "说明文档"  
 git status //查看工作区的状态
 git diff	//表示比较文件    当暂存区有文件时比较的时,比较的时工作区与暂存区的文件的差别，
							  当暂存区没文件时比较的时版本库中的与工作区的差别
 git diff HEDA -- 文件名	//表示比较文件    比较的是工作区与版本库中的差别
 
 
 git log	//查看文件的历史记录
 git log  文件名 	/查看指定文件的历史记录
 git log --pretty=oneline	//简单输出提交版本信息
 git reset --hard HEAD^		//表示回退到前一个版本 一个^表示回退一个版本，一百个^表示回退到前一百个版本
 git reset --hard commit_ID	//表示回退到具体的版本  commit_ID表示版本号
 git reflog //查看历史记录
 
 git checkout -- 文件名		//丢弃工作区的修改，将暂存区或commt区最近的一次版本放到工作区
												且支队文件对容有效，对文件的修改无效
 git restore 文件名 		//丢弃工作区的修改，且对文件的修改
 rm 文件名	//用于删除文件，但是版本控制库里没有删除
 git rm 文件名	//把版本控制库里的文件也删除
 
 
 //创建远程分布式版本控制系统
 1.查看用户目录文件是否有.ssh文件
 2.如果没有则用 shh-keygan  -t rsa -C “电子邮件”  然后一路回车
 3.然后在github里面添加ssh key，然后把id_rsa.puh文件里的内容添加到key里
 4.然后在github里面创建一个和本地仓库一样的库
 5.然后用 git remote add origin git@github.com:GitHub账户名/仓库名.git   //关联远程库
 6.然后利用 git push -u origin master //第一次加上-u 以后都不需要
 
 
 //克隆版本

 git clone git@github.com:GitHub账户名/仓库名.git
 
 
 //创建新的分支
 
 git checkout -b 分支名称		//创建新分支并且切换到所创建的分支
 git switch  -c   分支名称		//创建新分支并且切换到所创建的分支
 
 git branch  分支名称			//创建新分支
 git checkout 分支名称			//切换到此分支
 git switch  分支名称 			//切换到此分支
 
 git branch			//查看分支情况
 
 git merge 分支名称		//将分支与master分支合并
 git branch -d  分支名称 	//删除分支
 
 
 
 
 
 
 
